<style type="text/css">

  :root {
    --progress--color-primary: {{ settings.progress_discount__color_primary }};
    --progress--color-secondary: {{ settings.progress_discount__color_secondary }};
    --progress--color-secondary-lighten: {{ settings.progress_discount__color_secondary | color_lighten: 20 }};
  }

  
  {%- unless settings.discounts__vip_code == blank -%}
    .wayfx-collection__header {
      margin-bottom: 30px !important;
    }
  {%- endunless -%}

</style>

<script type="text/javascript">

  {% if settings.enable_sidebarcart and settings.progress_discount__enabled == "cart" or settings.progress_discount__enabled == "both" %}
  DomReadyPromise().then( async () => {
    const {globalSideBarCartInstance} = window
    globalSideBarCartInstance.extensions.push({
      key:'AOV_bar',
      extensionPoint:'header:bottom',
      hideOnEmptyCart:true,
      content:'<global-aov-bar hideOnEmptyCart="true"></global-aov-bar>'
    })

    if(globalSideBarCartInstance.rendered){
      globalSideBarCartInstance.render()
    }

  }).catch(err => {
    console.log(err)
  })
  {% endif %}

  let discountUseOrignalPrice = true;
  {%- if settings.progress_discount__original_price != true -%}
    discountUseOrignalPrice = false;
  {%- endif -%}

  class GlobalAOVBar extends HTMLElement {
    constructor(settings){
      super()

    }
    
    connectedCallback(){
      DomReadyPromise().then( async () => {
        this.GlobalCartInstance = await new GlobalCart() 
        this.hideOnEmptyCart = this.attributes.hideOnEmptyCart ? true : false
        this.discountUseOrignalPrice = discountUseOrignalPrice
        this.storage = JSON.parse(localStorage.getItem('discounts'))
        Object.keys(this.storage.mechanics).forEach( key => {
          const item = this.storage.mechanics[key]
          let discountCodeValidation = !item.codes?.length || item.codes.length && item.codes.indexOf(this.storage.discount_code) >= 0 ? true : false
          this.storage.mechanics[key].visible = this.storage.mechanics[key].visible && discountCodeValidation
        })
        const hasVisibleTiers =  Object.values(this.storage.mechanics).filter(({visible}) => visible).length
        const activeDiscountCode = await this.GlobalCartInstance.getAllDiscountCodes()
        const active = hasVisibleTiers && !this.storage.vip_access || hasVisibleTiers && this.storage.vip_access == activeDiscountCode
        if(active){
          this.mount()
        }

      }).catch(err => {
        console.log(err)
      })
    } 

    async mount() {
    
      this.innerHTML = `
        <div class="wayfx-collection__progress loading">
          <div class="wayfx-wrapper">
            <p class="wayfx-collection__progress-header">&nbsp;</p>
            <ul class="wayfx-collection__progress-wrapper">
              <li>
                <div class="wayfx-collection__progress-bar" style="width: 25px"></div>
              </li>
            </ul>
            <div class="wayfx-collection__progress-steps">
              <ul>
              </ul>
            </div>
          </div>
        </div>  
      `
      // set this to _this, lot of nested none es6 :/
      const _this = this

      let cart = {}
      let steps = [];
      let cartTotal = 0;
      let nextSteps = [];
      let discounts = {};
  
      const bars = this.querySelector('.wayfx-collection__progress');
      const symbol = "{{ cart.currency.symbol }}";
  
      const forLoop = function(array, callback) {
        for(const index in array) {
          callback(array[index], index, array);
        }
      }
  
      const getLabel = function(text, visible) {
        visible = visible ? "style=\"display: initial;\"" : "";
        return text ? "<span class=\"site-wide--label\" "+visible+">"+text+"</span>" : "";
      }
  
      const setStep = function(step, callback) {
        let titles = "";
  
        if(step.percentage > 0) {
          titles += step.percentage + "%";
        }
  
        if(step.products.length) {
          if(step.products.length == 1) {
            titles += prependText(" + ", titles, getProductTitle(step.products[0]));
          } else {
            titles += prependText(" + ", titles, "Free Gifts");
          }
        }

        if(step.label == 'Sample'){
          titles = {{ settings.sample_progress_text | json }}
        }
  
        if(step.shipping) {
          titles += prependText(" + ", titles, "Free Shipping");
        }
  
        step.titles = titles;
  
        callback(step);
      }
  
      const prependText = function(prefix, text, append) {
        return (text.length ? prefix : "") + append;
      }
  
      const getProductTitle = function(product) {
        return (product.title == "Default Title") ? product.name : product.title;
      }
  
      const discountStepsMatch = function(steps, discounts, callback) {
  
        let discountsMatched = [];
  
        forLoop(discounts, function discountEach(discount, discountName) {
  
          let step = {
            label: "",
            products: [],
            percentage: discount.percentage,
            requirement: discount.requirement
          }
  
          if(!discount.visible || discountsMatched.includes(discountName)) {
            return;
          }
  
          discountsMatched.push(discountName);
  
          if(discount.label) {
            step.label = discount.label;
          }
  
          if(discount.product) {
            step.products.push(discount.product);
          }
  
          if(discount.free_shipping) {
            step.shipping = true;
          }
  
          if(discount.codes) {
            step.codes = discount.codes;
          }
  
          forLoop(discounts, function discountMatch(match, matchName) {
            if(discountName != matchName && match.visible) {
              if (discount.requirement == match.requirement) {
                if(match.product) {
                  step.products.push(match.product);
                }
                if(match.percentage > discount.percentage) {
                  step.percentage = match.percentage;
                }
                if(match.free_shipping) {
                  step.shipping = true;
                }
                if(match.codes) {
                  if(step.codes && step.codes.length) {
                    step.codes.concat(
                      match.codes.filter(function getUniqueCodes(item) {
                        return step.codes.indexOf(item) < 0
                      })
                    );
                  } else {
                    step.codes = match.codes;
                  }
                }
                if(match.label) {
                  step.label = prependText(" & ", step.label, match.label);
                }
                discountsMatched.push(matchName);
              }
            }
          });
  
          steps.push(step);
        });
  
        callback(steps);
      }
  
      const generateSteps = function(steps) {
        discountStepsMatch(steps, discounts, function matchedSteps(steps) {
          forLoop(steps, function setStepInformation(step, index, steps) {
  
            step.index = index;
  
            if(index == 0) {
              if(step.requirement == 0) {
                step.class = "step-left";
              }
            }
  
            setStep(step, function setStepAdditionalInformation() {});
  
          });
        });
      }
  
      const render = function(steps, message, callback) {
        bars.querySelector('.wayfx-collection__progress-steps ul').innerHTML = steps;
        bars.querySelector('.wayfx-collection__progress-header').innerHTML = message;
        bars.classList.remove('loading');
        callback(bars);
      }
  
      const renderSteps = function(steps) {
        return steps.map( (step,index) => {
          return ` 
            <li class="wayfx-collection__progress-step wayfx-collection__progress-step--${index} ${step.class} ${step.achived ? 'wayfx-collection__progress-step--completed' : ''}">
            <span class="wayfx-text">
              ${step.titles}
            </span>
          </li>`
        }).join('');
      }
  
  
      const compile = (data, string) => {
        const regex = {% raw %}/{{#if\s*(.*?)}}([\s\S]*?){{\/if}}|{{{\s*(.*?)\s*}}}|{{\s*(.*?)\s*}}/gs;{% endraw %}
        const compiledString = string.replace(regex, ( match, condition, content, unescapedExpression, escapedExpression) => {
          if (unescapedExpression !== undefined) {
            const value = getValueFromData(unescapedExpression, data);
            return value !== undefined ? value : match;
          } else if (escapedExpression !== undefined) {
            const value = getValueFromData(escapedExpression, data);
            return value !== undefined ? escapeHtml(value) : match;
          } else if (condition !== undefined) {
            const conditionResult = evaluateCondition(condition, data);
            return conditionResult ? compile(data, content) : '';
          } else {
            return match;
          }
        });
      
        return compiledString;
      };
      
      const getValueFromData = (expression, data) => expression.split('.').reduce((obj, prop) => obj && obj[prop], data);
      
      const escapeHtml = (unsafe) => unsafe.replace(/[&<"']/g, (char) => ({'&': '&amp;', '<': '&lt;', '"': '&quot;', "'": '&#039;'}[char]));
      
      const evaluateCondition = (condition, data) => {
        try {
          return new Function("data", `
            with (data) {
              return ${condition};
            }
          `)(data);
        } catch (error) {
          return false;
        }
      };
  
      const renderMessage = function(step, total, required=(step.requirement-total)) {
        const stepInfo = {
          label: getLabel({%- if settings.site_wide__label_enabled -%}step.label{% endif %}),
          code: "",
          step: step,
          total: total,
          symbol: symbol,
          required: required.toFixed(2)
        }
  
        if(step.codes) {
          if(step.codes.length) {
            stepInfo.code = getLabel(step.codes[0], true);
          }
        }
  
      
        let templateString = {{ settings.progress_discount__message_step_away | json }}
        if(required <= 0) {
          if(step.requirement == 0) {
            templateString = {{ settings.progress_discount__message_step_zero | json }};
          }
          templateString = {{ settings.progress_discount__message_step_congrats | json }};
        }
    
        return compile(stepInfo,templateString);
      }
  
      const calculate = (storage) => {
        cart = this.GlobalCartInstance.cart
        discounts = storage.mechanics;
        cartTotal = this.discountUseOrignalPrice ? cart.original_total_price : cart.total_price
        cartTotal = parseFloat((cartTotal / 100 )).toFixed(2)
        if(!steps.length) {
          generateSteps(steps);
        }
  
        forLoop(steps, function calculateStep(step, index, steps) {
          if(cartTotal >= step.requirement) {
            /* @todo add gwp products */
            step.achived = true;
          } else {
            /* @todo remove gwp products */
            step.achived = false;
          }
        });
  
        window.discountProgressSteps = steps; /* for debugging. */
          calculateNextSteps(steps, function getNextStep(nextStep){
            render(renderSteps(steps), renderMessage(nextStep, cartTotal), function progress(bars) {
  
              let prgoressFactor = 0;
  
              let prgoressWidth = _this.querySelector('.wayfx-collection__progress-steps').offsetWidth;
  
              forLoop(steps, function setStepAdditionalInformation(step, index) {
  
                let prgoressStepWidth = _this.querySelector(`.wayfx-collection__progress-step--${index}`).offsetWidth
  
                let currentFactor = prgoressStepWidth / prgoressWidth * 100;
  
                prgoressFactor += currentFactor;

                step.offset = parseFloat((prgoressStepWidth / prgoressWidth).toFixed(2));
                step.factor = (index == 0) ? 0 : parseFloat((prgoressFactor - currentFactor).toFixed(2));
  
              });
  
              let progress = calculateProgress(nextStep, cartTotal);
              bars.querySelector('.wayfx-collection__progress-bar').style.width = `${progress}%`;
            
            });
          });

          this.style.display = !this.hideOnEmptyCart || this.hideOnEmptyCart && cartTotal > 0 ? 'block' : 'none'

      }
  
      const calculateProgress = function(step, total) {
        return step.factor + (total / step.requirement * 100 * step.offset) || 0;
      }
  
      const calculateNextSteps = function(steps, callback) {
  
          nextSteps = steps.filter(function findUnachivedStep(step) {
            return (cartTotal <= step.requirement);
          });
  
          if(!nextSteps.length) {
            nextSteps.push(steps[steps.length-1]);
          }
  
          callback(nextSteps[0]);
      }
  
      // On discounts update..
      this.GlobalCartInstance.subscribe( () => {
        calculate(this.storage)
      })
      calculate(this.storage)
    }
  
  }

  customElements.define('global-aov-bar', GlobalAOVBar);

</script>
