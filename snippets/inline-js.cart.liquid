
<script type="text/javascript">

  //pollyfill for references to window.globalSideBarUI__cart.open()
  window.globalSideBarUI__cart = {
    open:async () => {
      const globalSideBarCartUi$ = new ObserverLite({key:'GlobalSidebar.SidebarCart'})
      const globalSideBarCartUi = await globalSideBarCartUi$.once() 
      globalSideBarCartUi.open()
    }
  }

  function globalInlineAtcErrorMessage(parent,error){
    let errors = parent.querySelector('.js-product-form-errors') 
    errors?.remove()
    errors = parseHTML(`<span style="text-align:center;display:block" class="js-product-form-errors errors qty-error">${error}</span>`)
    parent.appendChild(errors)
    errors = parent.querySelector('.js-product-form-errors')
    setTimeout( () => {
      errors.remove()
    },2500)  
  }

  (async () => {
    const GlobalCartMain = window.GlobalCartMain = new GlobalCart({
      money_format: {{ shop.money_format | json }},
      cart:{% render 'global.cart_json' %},
      currency_symbol: {{ cart.currency.symbol | json }},
      market: {{ request.locale.root_url | json }}
    })
    
    // placeholder thumb ATC events, remove the inline JS calls?
    GlobalCart.prototype.addProductFromButton = function(e,data){

      e.preventDefault()
      const btn = e.currentTarget
      let form = false
      data = data || false

      btn.classList.add('btn--loading')
      form = e.currentTarget.closest('form')
      if(!data && form){
        // handle isntances when atc is called inside form element
        data = this.serialize(form)
        let variantInventoryQty = form.querySelector('input[name="quantity"]') ? parseInt(form.querySelector('input[name="quantity"]').dataset.variantInventoryQty) : false
        if(variantInventoryQty){
          data.properties = {
            ...data.properties,
            ...{_variantInventoryQty:variantInventoryQty}
          }
        }
        data.quantity = parseInt(data.quantity)
        data = {
          items:[data]
        }
      }else if(!data && !form){
      // handle where atc is called with button and variant id as dataattr
      const {variantId,variantInventoryQty} = btn.dataset
        if(variantId){
          data = {
            quantity:1,
            id:parseInt(variantId),
            properties:{
              _variantInventoryQty:parseInt(variantInventoryQty)
            }
          }
          data.quantity = parseInt(data.quantity)
          data = {
            items:[data]
          }
        }else{
          globalInlineAtcErrorMessage(btn.parentNode,'Sorry, there was a promlem adding this to the bag')
          return
        }
      }
 
      // add it to the cart
      this.addToCart(data)
      .then( () => { 
        btn.classList.remove('btn--loading')
        btn.classList.add('btn--added')
        const orignalAtcHtml = btn.innerHTML
        btn.innerHTML = `<span class="text">{{ 'products.product.added' | t }}</span>`
        setTimeout(() => {
          btn.classList.remove('btn--added')
          btn.innerHTML = orignalAtcHtml
        }, 2000)
      }).catch(err => {
        // in theory, this will only fire in edge cases where item added from thumbnail / quick view, since qty GlobalVariantQtyHelper should stop any instances of more items than in stock being added
        btn.classList.remove('btn--loading')
        btn.innerHTML = `<span class="text">{{ 'products.product.add_to_cart' | t }}</span>`
        let error = err.description ? err.description : false
        if(err.type == 'max_six'){
          globalInlineAtcErrorMessage(btn.parentNode, {{ 'general.stock.max_per_order' | t: max: '6', variant_title: 'of this item' | json }})
        }
        if(error){
          globalInlineAtcErrorMessage(btn.parentNode,error)
        }
      })
      return false
    }

  })()
    
  DomReadyPromise().then( async () => {
    // Update the cart counters
    const cartCounters = document.querySelectorAll('.js-global-cart-counter')
    const updateCounters = () => {
      cartCounters.forEach(el => {
        el.innerText = GlobalCartMain.cart.item_count
      })
    }
    GlobalCartMain.subscribe( () => {
      updateCounters()
    })

    const accessToken = {{ shop.metafields.storefront_api.token | json }}
    const permanentDomain = {{ shop.permanent_domain | json }}
    const version = "2024-07"

    window.sfapi = new StoreFrontApi({
      accessToken:accessToken,
      storeUrl:`https://${permanentDomain}`,
      version:version
    })


  }).catch(err => {
    console.log(err)
  })

</script>


