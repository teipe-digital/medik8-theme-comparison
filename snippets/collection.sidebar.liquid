<!-- snippets/collection.sidebar.liquid -->

{% capture mobile_filter_actions %}
  <div>
    <button class="btn--outline wayfx-collection__clear-filters" type="button">{{ 'collections.sidebar.clear_all' | t }}</button>
  </div>
  <div>
    <button class="btn btn--large wayfx-collection__filter-close" type="button">{{ 'collections.sidebar.done' | t }}</button>
  </div>
{% endcapture %}

<div class="wayfx-collection__sidebar-header wayfx-collection__sidebar-header--desktop">
  <span>Filter by</span>
  <span class="wayfx-collection__clear-filters">{{ 'collections.sidebar.clear_filters' | t }}</span>
</div>

<div class="wayfx-collection__sidebar-header wayfx-collection__sidebar-header--mobile">
    <button aria-label="Close Filters" class="wayfx-collection__filter-close" type="button">
        <i class="wayfx-icon wayfx-icon-long-arrow-left"></i>
    </button>
    <div class="wayfx-collection__sidebar-title">{{ 'collections.sidebar.filter_products' | t }}</div>
</div>

{% comment %} {%- assign filters-type = "Serums, Moisturizers, Cleansers & Toners, Exfoliators & Masks, Kits, Direct Acids, Eyes & Lips, Travel, Accessories" | split: ', ' -%}
{%- assign concern-filters = "Fine Lines & Wrinkles, Anti-Pollution, Blemish, Dry & Dehydrated Skin, Pigmentation, Pore Refining, Redness, Body" | split: ', ' -%}
{%- assign ingredients-filters = "Retinal, Retinol, Retinyl Retinoate, Peptides, Glycolic Acid, Niacinamide, Hyaluronic Acid, Ceramides, Salicylic Acid (BHA), Gluconolactone (PHA)" | split: ', ' -%}
{%- assign csa-filters = "Vitamin C, Sunscreen, Vitamin A, CSA Kits, Advanced Line" | split: ', ' -%} {% endcomment %}

{% assign filter-categories = settings.filter_categories | split: ', ' %}

<div class="wayfx-collection__sidebar-filters">
  <div class="wayfx-collection__filter-actions wayfx-collection__filter-actions--top">
    {{ mobile_filter_actions }}
  </div>

  <div class="wayfx-collection__sidebar-flex">
    {% for filter-cat in filter-categories %}
      {% if filter-cat == "type" %}
        {% assign filter-id = "type" %}
        {%- assign filters = settings.filter_type | split: ', ' -%}
      {% elsif filter-cat == "concern" %}
        {% assign filter-id = "concern" %}
        {%- assign filters = settings.filter_concern | split: ', ' -%}
      {% elsif filter-cat == "ingredients" %}
        {% assign filter-id = "ingredients" %}
        {%- assign filters = settings.filter_ingredients | split: ', ' -%}
      {% elsif filter-cat == "csa" %}
        {% assign filter-id = "csa" %}
        {%- assign filters = settings.filter_csa | split: ', ' -%}
      {% endif %}

      {% assign showFilterSet = true %}
      {% if collection.metafields.MOS2.collection_category and collection.metafields.MOS2.collection_category.value == filter-id %}
        {% assign showFilterSet = false %}
      {% endif %}

      {% if showFilterSet %}
        <div class="wayfx-collection__sidebar-block">
          <h2 class="h3">{{filter-id | capitalize }}</h2>
          <ul class="wayfx-filter wayfx-filter--{{filter-id}}">
            {%- for filter in filters -%}
              <li>
                <label for="filter-{{ filter-id | handleize }}-{{ filter | handleize }}" class="wayfx-filter-option wayfx-filter-{{filter-id}} wayfx-filter-{{filter-id}}--{{ filter | handleize }}" tabindex="0">
                  <input autocomplete="off" id="filter-{{ filter-id | handleize }}-{{ filter | handleize }}" data-id="{{ filter | handleize }}" data-type="{{filter-id}}" type="checkbox" role="checkbox" aria-checked="false" aria-label="{{ filter-id }}:{{ filter }}" />
                  <span class="checkbox"></span>
                  <span class="text">{{ filter }}</span>
                </label>
              </li>
              <script type="text/javascript">
                if (window.location.href.includes("filter_{{filter-id}}={{ filter | handleize }}")) {
                  const checkbox = document.querySelector(".wayfx-filter-{{filter-id}}--{{ filter | handleize }} input")
                  if (!checkbox.checked) {
                    setTimeout(() => {
                      checkbox.checked = true
                    }, 0)
                  }
                }
              </script>
            {%- endfor -%}
          </ul>
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <div class="wayfx-collection__filter-actions wayfx-collection__filter-actions--bottom">
    {{ mobile_filter_actions }}
  </div>
</div>

<script type="text/javascript">
  function setQueryString() {
    const filters = document.querySelectorAll('.wayfx-filter-option input:checked')
    const flavours = Array.from(filters, f => f.dataset.type)
    const values = Array.from(filters, f => f.dataset.id)
  
    flavours.forEach((flavour, index) => {
      flavours[index] = `&filter_${flavour}=`
    });
  
    values.forEach((value, index) => {
      values[index] = flavours[index] + value
    })
  
    const queryString = values.join('').replace(/,/g, '')
    const sortBy = document.querySelector('#SortBy').value
  
    window.history.replaceState({}, "", decodeURIComponent(`${window.location.pathname}?sort_by=${sortBy}&${queryString}`))
  }

  function resetFilters() {
    const wayfxFilters = document.querySelectorAll('.wayfx-filter-option input:checked')
    const wayfxProducts = document.querySelectorAll('.wayfx-product__item')
  
    wayfxFilters.forEach(filter => {
      filter.checked = false
    })
  
    wayfxProducts.forEach(product => {
      product.style.display = 'block' // This line shows the product items, assuming the default display style is 'block'
    })
  
    filterCount()
    setQueryString()
  }

  function activeFilterCount() {
    const wayfxFilters = document.querySelectorAll('.wayfx-filter-option input:checked')
    const wayfxActiveFiltersWrapper = document.querySelector(".wayfx-collection__filter-count")
    const wayfxActiveFiltersCount = wayfxFilters.length
    const wayfxResetButton = document.querySelector('.wayfx-collection__clear-filters')
    wayfxActiveFiltersWrapper.innerHTML = `(${wayfxActiveFiltersCount})`

    if (wayfxActiveFiltersCount > 0) {
      wayfxResetButton.style.display = 'inline-block'
    } else {
      wayfxResetButton.style.display = 'none'
      wayfxActiveFiltersWrapper.innerHTML = ''
    }
  }
  
  function filterCount() {
    const wayfxTotalContainer = document.querySelector('.wayfx-collection__total')
    let wayfxProductTotal = 0
    const wayfxProducts = document.querySelectorAll('.wayfx-product__item')
    const wayfxFilters = document.querySelectorAll('.wayfx-filter-option input:checked')
    const wayfxActiveFilters = wayfxFilters.length
    const wayfxResetButton = document.querySelector('.wayfx-collection__clear-filters')

    wayfxProducts.forEach(product => {
      if (getComputedStyle(product).display !== 'none') {
        wayfxProductTotal++
      }
    })
  
    const wayfxNoResults = document.querySelector('.wfx-collection__no-results')
    if(wayfxNoResults){
      if (wayfxProductTotal > 0) {
        wayfxNoResults.style.display = 'none'
      } else {
        wayfxNoResults.style.display = 'block'
      }
    }

    wayfxTotalContainer.innerHTML = wayfxProductTotal === 1 ? `${wayfxProductTotal} Product` : `${wayfxProductTotal} Products`
  
    activeFilterCount()
  
    if (typeof collectionAdvert === 'function') {
      collectionAdvert()
    }
  
    window.collectionFiltersUpdate$.next()
  }

  function updateFilters(){
    const wayfxFilters = document.querySelectorAll('.wayfx-filter-option input:checked')
    const wayfxProducts = document.querySelectorAll('.wayfx-product__item')

    wayfxProducts.forEach(product => {
      product.style.display = 'flex'
    })

    if (wayfxFilters.length === 0) return filterCount()

    const wayfxFilterValues = Array.from(wayfxFilters).map(o => o.dataset.id)

    wayfxFilters.forEach(filter => {
      const filterType = filter.dataset.type
      Array.from(wayfxProducts).forEach(product => {
        const productFilterValue = product.dataset[filterType]

        if (productFilterValue.includes(",")) {
          let productFilters = productFilterValue.split(",")
          let hit = productFilters.filter(f => wayfxFilterValues.includes(f)).length
          if (hit <= 0) product.style.display = 'none'
        } else {
          if (!wayfxFilterValues.includes(productFilterValue)) product.style.display = 'none'
        }
      })
    })

    filterCount()
    setQueryString()
  }

  DomReadyPromise().then( () => {
    window.collectionFiltersUpdate$ = window.collectionFiltersUpdate$ || new ObserverLite()
    const wayfxResetButton = document.querySelector('.wayfx-collection__clear-filters')
    const wayfxCloseFilters = document.querySelector('.wayfx-collection__filter-close')
    const wayfxFilterSidebar = document.querySelector('.wayfx-collection__sidebar')
    
    document.querySelectorAll('.wayfx-filter-option').forEach(element => {
      element.addEventListener('click', () => {
        updateFilters()
      })
    })

    wayfxCloseFilters.addEventListener('click', () => {
      wayfxFilterSidebar.style.display = 'none'
      wayfxFilterSidebar.classList.remove('wayfx-collection__sidebar--active')
    })
    
    wayfxResetButton.addEventListener('click', () => {
      resetFilters()
    })

    updateFilters()

  }).catch(err => {
    console.log(err)
  })
</script>
