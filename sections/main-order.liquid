{% assign show_sold_out_warning = false %}
{% assign out_of_stock_size = 0 %}
{% assign can_be_reordered = true %}

{% for line_item in order.line_items %}
  {% assign product = all_products[line_item.product.handle] %}
  {% if line_item.properties._upsell_validation or line_item.product.handle contains 'sample'  %}
    {% assign show_sold_out_warning = true %}
    {% assign out_of_stock_size = out_of_stock_size | plus: 1 %}
  {% else %}
    {% unless product.id != blank and line_item.variant.inventory_quantity >= line_item.quantity  %}
      {% assign show_sold_out_warning = true %}
      {% assign out_of_stock_size = out_of_stock_size | plus: 1 %}
    {% endunless %}
  {% endif %}
{% endfor %}

{% if order.line_items.size == out_of_stock_size %}
 {% assign can_be_reordered = false %}
{% endif %}
<section class="wayfx-block wayfx-block--account">
  <div class="wayfx-wrapper">
    <div class="grid">
      <div class="grid__item three-quarters medium-down--one-whole">
        <div class="wayfx-block__left">

          {% if show_sold_out_warning == true %}
            {% if can_be_reordered == true %}
              <div class="toast-container">
                <div class="toast-message-warning margin-bottom">
                  {{ 'customer.order.product_oos_some' | t }}</span>
                </div>
              </div>
            {% else %}
              <div class="toast-container">
                <div class="toast-message-error margin-bottom">
                  {{ 'customer.order.product_oos_all' | t }}</span>
                </div>
              </div>
            {% endif %}
          {% endif %}

          <div class="js-order-page-top-info order-page-top-info">

          <p class="p--lg order-number">{{ 'customer.order.title' | t: name: order.name | remove: 'Order ' }}</p>
          <p class="p--lg" style="margin: 10px;">{{ 'customer.order.date' | t: date: order.created_at | date: "%B %d, %Y %I:%M%p" }}</p>
          <p>
            <button 
              id="addAllToCart" 
              class="btn cell-l--d2 cell-r--d2 {% if can_be_reordered == false %} reorder-disabled{% endif %}" 
              {% if can_be_reordered == false %}disabled{% endif %}>
              <span class="text">{{ 'customer.order.reorder' | t }}<i class="fa fa-rotate-right" style="margin-left: 8px; font-family: 'FontAwesome' !important;"></i></span>
            </button>
          </p>

          </div>

          {% if order.cancelled %}
            <div class="errors">
              {% assign cancelled_at = order.cancelled_at | date: "%B %d, %Y %I:%M%p" %}
              <p class="h5">{{ 'customer.order.cancelled' | t: date: cancelled_at }}</p>
              <p>{{ 'customer.order.cancelled_reason' | t: reason: order.cancel_reason }}</p>
            </div>
          {% endif %}
          <div class="table-wrap">
            <table class="full">
              <thead>
              <tr>
                <th>{{ 'customer.order.product' | t }}</th>
                <th class="text-right">{{ 'customer.order.total' | t }}</th>
              </tr>
              </thead>
              <tbody>
              {% for line_item in order.line_items %}
                
                {% assign product = all_products[line_item.product.handle] %}
                <tr id="{{ line_item.key }}" style="border-bottom: 1px solid var(--colorBorder) !important">
                  <td>
                    <span class="line-item-quantity">{{ line_item.quantity }}</span>

                      <span class="{% unless product.id != blank and line_item.variant.inventory_quantity >= line_item.quantity %}line-item-sold-out{% endunless %}">
                        <b>{{ line_item.title | link_to: line_item.product.url }}</b>
                      </span>

                    {% if line_item.sku != blank %}
                      ({{ line_item.sku }})
                    {% endif %}

                    {% if line_item.fulfillment %}
                      <div class="note">
                        {% assign created_at = line_item.fulfillment.created_at | date: format: 'month_day_year' %}
                        {{ 'customer.order.fulfilled_at' | t: date: created_at }}
                        {% if line_item.fulfillment.tracking_number %}
                          <a href="{{ line_item.fulfillment.tracking_url }}">{{ line_item.fulfillment.tracking_company }} #{{ line_item.fulfillment.tracking_number}}</a>
                        {% endif %}
                      </div>
                    {% endif %}
                  </td>
                  <td class="text-right">{{ line_item.quantity | times: line_item.price | money }}</td>
                </tr>
              {% endfor %}
              </tbody>
              <tfoot>
              <tr>
                <td colspan="1">{{ 'customer.order.subtotal' | t }}</td>
                <td class="text-right">{{ order.subtotal_price | money }}</td>
              </tr>
              {% for discount in order.discounts %}
                <tr class="order_summary discount">
                  <td colspan="1">{{ discount.code }} {{ 'customer.order.discount' | t }}</td>
                  <td class="text-right">{{ discount.savings | money }}</td>
                </tr>
              {% endfor %}
              {% for shipping_method in order.shipping_methods %}
                <tr>
                  <td colspan="1">{{ 'customer.order.shipping' | t }} ({{ shipping_method.title }})</td>
                  <td class="text-right">{{ shipping_method.price | money }}</td>
                </tr>
              {% endfor %}
              {% for tax_line in order.tax_lines %}
                <tr>
                  <td colspan="1">{{ 'customer.order.tax' | t }} ({{ tax_line.title }} {{ tax_line.rate | times: 100 }}%)</td>
                  <td class="text-right">{{ tax_line.price | money }}</td>
                </tr>
              {% endfor %}
              <tr>
                <td colspan="1"><strong>{{ 'customer.order.total' | t }}</strong></td>
                <td class="text-right"><strong>{{ order.total_price | money }} {{ order.currency }}</strong></td>
              </tr>
              </tfoot>
            </table>
          </div>

        </div>
      </div>
      <div class="grid__item one-quarter medium-down--one-whole">
        <div class="wayfx-block__right">
          <h3 class="h3--secondary">{{ 'customer.order.account_links' | t }}</h3>
          <ul>
            {% for link in linklists.account-menu.links -%}
              <li>{{ link.title | link_to: link.url }}</li>
             {%- endfor %}
          </ul>
        </div>
        <div class="wayfx-block__right">
          <h3 class="h3--secondary">{{ 'customer.order.shipping_address' | t }}</h3>
          <h4 class="h4--primary">{{ customer.name }}</h4>
          <p class="p--md">
            {{ customer.default_address.address1 }}<br>
            {% if customer.default_address.address2 != "" %}
              {{ customer.default_address.address2 }}<br>
            {% endif %}
            {% if customer.default_address.city != "" %}
              {{ customer.default_address.city }}
            {% endif %}
            {% if customer.default_address.province_code != "" %}
              {{ customer.default_address.province_code | upcase }}
            {% endif %}
            {% if customer.default_address.zip != "" %}
              {{ customer.default_address.zip | upcase }}<br>
            {% endif %}
            {% if customer.default_address.country != "" %}
              {{ customer.default_address.country }}<br>
            {% endif %}
            {% if customer.default_address.phone != "" %}
              {{ customer.default_address.phone }}
            {% endif %}
          </p>
        </div>
        <div class="wayfx-block__right">
          <h3 class="h3--secondary">{{ 'customer.order.billing_address' | t }}</h3>
          <h4 class="h4--primary">{{ customer.name }}</h4>
          <p>
            {% if order.billing_address.company != '' %}
              {{ order.billing_address.company }}<br>
            {% endif %}
            {{ order.billing_address.street }}<br>
            {{ order.billing_address.city }},
            {% if order.billing_address.province != '' %}
              {{ order.billing_address.province }}
            {% endif %}
            {{ order.billing_address.zip | upcase }}<br>
            {{ order.billing_address.country }}<br>
            {{ order.billing_address.phone }}
          </p>
        </div>
      </div>
    </div>
  </div>
</section>

<script type="text/javascript">

  /* todo - this could be moved into a global toast componant, it is used in quite a few other places. I will leave it here for now as 
     the other instances are not specific to the cart update.
  */
  class GlobalSidebarCartToast extends HTMLElement{
    constructor(){
      super()
    }

    connectedCallback(){
      if(this.mounted){
        return
      }
      DomReadyPromise().then( () => {
        const settingsTemplete = this.querySelector(':scope > template')
        if(settingsTemplete){
          try{
            this.settings = JSON.parse(settingsTemplete.innerHTML)
            settingsTemplete.remove()
          }
          catch(err){
            console.log(err)
          }
        }
        if(!this.settings){
          this.remove()
          return 
        }
        this.render()
      }).catch(err => {
        console.log(err)
      })
    }

    render(){
      this.mounted = true
      this.innerHTML = `
        <div class="toast-container">
          <div class="${this.settings.messageClass}">${this.settings.message}</div>
        </div>
      `
      setTimeout( () => {
        this.remove()
      },3100)
    }
  }

  customElements.define('global-sidebar-cart-toast', GlobalSidebarCartToast);



  DomReadyPromise().then( async () => {
    const cart = await new GlobalCart()
    const addAllToCart = document.querySelector('#addAllToCart')
    const itemsToAdd = {
      items:[]
  
    }
    {% for line_item in order.line_items %}
      {% unless line_item.properties._upsell_validation or line_item.product.handle contains 'sample' %}
      {% assign product = all_products[line_item.product.handle] %}
      {% if product.id != blank and line_item.variant.inventory_quantity >= line_item.quantity %}
        itemsToAdd.items.push({
          id:{{ line_item.variant.id | json }},
          quantity:{{ line_item.quantity | json }}
        })
      {% endif %}
      {% endunless %}
    {% endfor %}
  
    function reorder(event) {
      let newItemsToAdd = {
        items: itemsToAdd.items.map( item => {
          let quantity = item.quantity
          let cartLineItemQty = cart.getLineItemsByVariantId(item.id)
          cartLineItemQty = cartLineItemQty[0]?.quantity  || 0
          const maxRemaining = 6 - cartLineItemQty
          return {
            id:item.id,
            quantity: !maxRemaining ? 0 : quantity > maxRemaining ? quantity - maxRemaining : quantity
          }
        }).filter( ({quantity}) => quantity > 0)
      }
      if(!newItemsToAdd.items.length){
        showToastWithError('There was an error adding those items',true)
        return
      } 
      addAllToCart.classList.add('btn--loading')
      cart.addToCart(newItemsToAdd)
      .then( () => {
        addAllToCart.classList.remove('btn--loading')
        showToastWithSuccess()
      })
      .catch(err => {
        addAllToCart.classList.remove('btn--loading')
        showToastWithError(err.description)
      })
    }
  
    async function showToastWithSuccess(){
      const globalSideBarCartUi$ = new ObserverLite({key:'GlobalSidebar.SidebarCart'})
      const globalSideBarCartUi = await globalSideBarCartUi$.once() 
      const SidebarCartItems$ = new ObserverLite({key:'GlobalSidebar.SidebarCart.Sections.CartItems'})
      const SidebarCartItems = await SidebarCartItems$.once()
      const toast = `
        <global-sidebar-cart-toast>
          <template>
            {
              "message":{{ 'customer.order.reorder_success' | t | json }},
              "messageClass":"toast-message-success timer"
            }
          </template>
        </global-sidebar-cart-toast>
      `
      SidebarCartItems.insertAdjacentHTML('afterbegin', toast);
      globalSideBarCartUi.open()
  
    }
  
    async function showToastWithError(message,showInOrderUI){
      const globalSideBarCartUi$ = new ObserverLite({key:'GlobalSidebar.SidebarCart'})
      const globalSideBarCartUi = await globalSideBarCartUi$.once() 
      const SidebarCartItems$ = new ObserverLite({key:'GlobalSidebar.SidebarCart.Sections.CartItems'})
      const SidebarCartItems = await SidebarCartItems$.once()
    
     
      const itemCount = cart.cart?.item_count || 0
  
      const toast = `
        <global-sidebar-cart-toast 
          ${!itemCount ? (
            `class="d-block row--d2"`
          ) : ''}
        >
          <template>
            {
              "message":${JSON.stringify(message)},
              "messageClass":"toast-message-error timer"
            }
          </template>
        </global-sidebar-cart-toast>
      `
  
      // if cart is empty, show the toast in the order UI else show in the cart UI
      if(!itemCount || showInOrderUI){
        document.querySelector('.js-order-page-top-info').insertAdjacentHTML('afterend',toast)
        return
      }
  
      SidebarCartItems.insertAdjacentHTML('afterbegin', toast);
      globalSideBarCartUi.open()
      
    }


    addAllToCart.addEventListener('click',reorder)
  }).catch(err =>{
    console.log(err)
  })
  
</script>